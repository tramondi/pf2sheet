// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: get_player_sheets.sql

package dao

import (
	"context"
)

const getPlayerSheets = `-- name: GetPlayerSheets :many
SELECT
  sheets.id, sheets.player_id, sheets.ancestry_id, sheets.class_id, sheets.background, sheets.fullname, sheets.level, sheets.hp_current, sheets.hp_max,
  players.id, players.name, players.pass_hash,
  ancestries.id, ancestries.code, ancestries.title,
  classes.id, classes.code, classes.title
FROM "sheets"
  LEFT JOIN "players"
    ON "sheets"."player_id" = "players"."id"
  LEFT JOIN "ancestries"
    ON "sheets"."ancestry_id" = "ancestries"."id"
  LEFT JOIN "classes"
    ON "sheets"."class_id" = "classes"."id"
WHERE "sheets"."id" = $1
`

type GetPlayerSheetsRow struct {
	Sheet    Sheet
	Player   Player
	Ancestry Ancestry
	Class    Class
}

func (q *Queries) GetPlayerSheets(ctx context.Context, id int32) ([]*GetPlayerSheetsRow, error) {
	rows, err := q.db.Query(ctx, getPlayerSheets, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPlayerSheetsRow
	for rows.Next() {
		var i GetPlayerSheetsRow
		if err := rows.Scan(
			&i.Sheet.ID,
			&i.Sheet.PlayerID,
			&i.Sheet.AncestryID,
			&i.Sheet.ClassID,
			&i.Sheet.Background,
			&i.Sheet.Fullname,
			&i.Sheet.Level,
			&i.Sheet.HpCurrent,
			&i.Sheet.HpMax,
			&i.Player.ID,
			&i.Player.Name,
			&i.Player.PassHash,
			&i.Ancestry.ID,
			&i.Ancestry.Code,
			&i.Ancestry.Title,
			&i.Class.ID,
			&i.Class.Code,
			&i.Class.Title,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
